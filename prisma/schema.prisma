// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum StatusOs {
  PENDENTE
  EM_ANDAMENTO
  CONCLUIDO
  ENTREGUE
  CANCELADO
}

enum AppRole {
  VISITOR
  MEMBER
  ADMIN
  OWNER
  BILLING
}

model User {
  id             String              @id @default(cuid())
  name           String
  surname        String?
  email          String              @unique
  password       String
  linkedAccount  Boolean             @default(false)
  image          String?
  role           AppRole             @default(VISITOR)
  emailVerified  DateTime?
  Authenticators Authenticator[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  Sessions       Session[]
  Accounts       Account[]
  permissions    Permission[]
  ownerCompanies Company[]           @relation("OwnerCompanies")
  memberships    CompanyMembership[]
}

model Permission {
  id       String @id @default(cuid())
  action   String // Exemplo: "read", "create", "update", "delete"
  resource String // Exemplo: "Post", "Comment", "User"
  user     User   @relation(fields: [userId], references: [id])
  userId   String
}

model Company {
  id        String              @id @default(cuid())
  name      String
  owner     User                @relation("OwnerCompanies", fields: [ownerId], references: [id])
  ownerId   String
  units     Unit[]
  members   CompanyMembership[]
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
}

model Unit {
  id                  String             @id @default(cuid())
  name                String
  company             Company            @relation(fields: [companyId], references: [id])
  companyId           String
  orders              Order[]
  cashFlows           CashFlow[]
  sales               Sale[]
  customers           Customer[]
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  CompanyMembership   CompanyMembership? @relation(fields: [companyMembershipId], references: [id])
  companyMembershipId String?
}

model Order {
  id         String   @id @default(cuid())
  unit       Unit     @relation(fields: [unitId], references: [id])
  unitId     String
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  items      Item[]
  status     StatusOs
  value      Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Customer {
  id        String   @id @default(cuid())
  unit      Unit     @relation(fields: [unitId], references: [id])
  unitId    String
  name      String
  surname   String?
  contact   String
  document  String
  email     String?
  address   String
  city      String
  state     String?
  zipCode   String
  country   String?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id                 String   @id @default(cuid())
  name               String
  brand              String
  model              String
  nSerie             String?
  category           String?
  quantity           Int
  problemDescription String
  repairDescription  String?
  repairValue        Float?
  status             StatusOs
  order              Order    @relation(fields: [orderId], references: [id])
  orderId            String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model CashFlow {
  id          String   @id @default(cuid())
  unit        Unit     @relation(fields: [unitId], references: [id])
  unitId      String
  date        DateTime
  description String
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Sale {
  id          String   @id @default(cuid())
  unit        Unit     @relation(fields: [unitId], references: [id])
  unitId      String
  date        DateTime
  description String
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CompanyMembership {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId String
  role      AppRole  @default(MEMBER)
  units     Unit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
